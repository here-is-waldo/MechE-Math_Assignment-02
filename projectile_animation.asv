
% main executive code
function projectile_animation()
    theta_guess = 0.3; % radians
    t_guess = 11; % seconds

    solve_init_conditions(theta_guess, t_guess)
end

% solve for initial theta and time of collision
function [theta_i, t_coll] = solve_init_conditions(theta_guess, t_guess)

    % Vin = [theta; t]
    dist_func = @(Vin) projectile_traj(Vin(1), Vin(2)) - target_traj(Vin(2));
 
    % make input
    x_guess = [theta_guess, t_guess]; solver_params = struct(); 
    % calc root of dist_fcn (when they collide)
    [x_root, exit_flag] = multi_newton_solver(dist_fcn, x_guess, solver_params)

    % store results
    theta_i = x_root(1); t_coll = x_root(2);

end


%function describing motion of a flying target
%   t is time in seconds
% We would like to find an initial firing angle θ so that the  
% projectile will hit a flying target. The motion (px, py) of the target 
% is given by target_traj
function V_t = target_traj(t)
    a1 = 7; % x amplitude in meters
    b1 = 9; % y amplitude meters
    omega1 = 3; % frequency in rad/sec
    phi1 = -pi/7; % phase shift in radians
    a2 = 2; % x amplitude in meters
    b2 = .7; % y amplitude meters
    omega2 = 5; % frequency in rad/sec
    phi2 = 1.5*pi; % phase shift in radians
    x0 = 28; % x offset in meters
    y0 = 21; % y offset in meters

    % compute position vector
    V_t = [a1*cos(omega1*t+phi1)+a2*cos(omega2*t+phi2)+x0;...
    b1*sin(omega1*t+phi1)+b2*sin(omega2*t+phi2)+y0];
end

% wrapper function that isolates the x coord
% of target trajectory at a given time
function t_x = target_wrapper_x(input)
    t = input(2);
    target_pos = target_traj(t);
    t_x = target_pos(1);
end

% wrapper function that isolates the y coord
% of target trajectory at a given time
function t_y = target_wrapper_y(input)
    t = input(2);
    target_pos = target_traj(t);
    t_x = target_pos(2);
end


% projectile motion function
% theta is angle projectile is fired at (in radians)
% t is time in seconds
function V_p = projectile_traj(theta, t)
    g = 2.3; % gravity in m/sˆ2
    v0 = 14; % initial speed in m/s
    px0 = 2; % initial x position
    py0 = 4; % initial y position
    
    % compute position vector
    V_p = [v0*cos(theta)*t+px0; -.5*g*t.^2+v0*sin(theta)*t+py0];
end

% wrapper function that isolates the x coord
% of the projectile trajectory at a given time
function p_x = projectile_wrapper_x(input)
    theta = input(1); t = input(2);
    projectile_pos = projectile_traj(theta, t);
    t_x = projectile_pos(1);
end

% wrapper function that isolates the y coord
% of the  trajectory at a given time
function p_y = projectile_wrapper_y(input)
    theta = input(1); t = input(2);
    projectile_pos = projectile_traj(theta, t);
    t_x = projectile_pos(2);
end


%visualize the motion of the projectile and the target
%theta is the initial firing angle of the projectile
%t_c is the predicted collision time
function run_simulation(theta,t_c)
    %create the plot window, set the axes size, and add labels
    hold on; axis equal; axis square;
    axis([0,50,0,50])
    xlabel('x (m)')
    ylabel('y (m)')
    title('Simulation of Projectile Shot at Target')
    
    %initialize plots for the projectile/target and their paths
    traj_line_proj = plot(0,0,'g--','linewidth',2);
    traj_line_targ = plot(0,0,'k--','linewidth',2);
    t_plot = plot(0,0,'bo','markerfacecolor','b','markersize',8);
    p_plot = plot(0,0,'ro','markerfacecolor','r','markersize',8);
    
    %position lists
    %used for plotting paths of projectile/target
    V_list_proj = [];
    V_list_targ = [];

    %iterate through time until a little after the collision occurs
    for t = 0:.005:t_c+1.5
        %set time so that things freeze once collision occurs
        t_input = min(t,t_c);
        %compute position of projectile and target
        V_p = projectile_traj(theta,t_input);
        V_t = target_traj(t_input);
        %update the position lists
        V_list_proj(:,end+1) = V_p;
        V_list_targ(:,end+1) = V_t;

        %index used for tail of target path
        i = max(1,size(V_list_targ,2)-300);
        %update plots
        set(t_plot,'xdata',V_t(1),'ydata',V_t(2));
        set(p_plot,'xdata',V_p(1),'ydata',V_p(2));
        set(traj_line_proj,'xdata',V_list_proj(1,:),'ydata',V_list_proj(2,:));
        set(traj_line_targ,'xdata',V_list_targ(1,i:end),'ydata',V_list_targ(2,i:end));
        %show updated plots
        drawnow;
    end
end